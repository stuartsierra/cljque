(ns cljque.observe
  "The Observer/Observable protocols, with bridges to sequences and IRefs.")

(defprotocol Observable
  (observe [observable observer]
    "Subscribes observer to events generated by observable.  Returns a
    no-arg function which unsubscribes the observer."))

(defprotocol Observer
  (message [observer m]
    "Called when an observable this observer is subscribed to
    generates a message m.")
  (done [observer]
    "Called when observable this observer is subscribed to is finished
    generating events.")
  (error [observer e]
    "Called when observable this observer is subscribed to throws an
    exception e."))

;;; Observable references

(defn observable-iref [iref]
  (reify Observable
    (observe [this observer]
      (let [key (Object.)]
        (add-watch iref key
                   (fn [_ _ old-value new-value]
                     (message observer new-value)))
        (fn [] (remove-watch iref key))))))

;;; Observables and Sequences

(defn observable-seq [s]
  (reify Observable
    (observe [this observer]
      (let [continue (atom true)]
        (future
          (try
            (loop [xs s]
              (when @continue
                (if-let [x (clojure.core/first xs)]
                  (do (message observer x)
                      (recur (next xs)))
                  (done observer))))
            (catch Throwable t
              (error observer t))))
        (fn [] (reset! continue false))))))

(deftype ObservableError [e])

(defn seq-observable [observable]
  (let [q (java.util.concurrent.LinkedBlockingQueue.)
        consumer (fn thisfn []
                   (lazy-seq
                    (let [x (.take q)]
                      (cond
                       (= x ::done) nil
                       (instance? ObservableError x) (throw (.e x))
                       :else (cons x (thisfn))))))]
    (observe observable
             (reify Observer
               (message [this m] (.put q m))
               (done [this] (.put q ::done))
               (error [this e] (.put q (ObservableError. e)))))
    (consumer)))
